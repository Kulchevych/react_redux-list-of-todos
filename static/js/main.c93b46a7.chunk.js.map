{"version":3,"sources":["types/GroupBy.ts","features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["GroupBy","actions","todo","type","payload","currentTodoReducer","state","action","query","groupBy","initialState","All","filterReducer","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","dispatch","selectedTodo","visibleTodos","queryCondition","title","toLowerCase","includes","toLocaleLowerCase","Active","completed","Completed","className","map","id","classNames","onClick","TodoFilter","handleChange","event","target","value","localName","onChange","placeholder","trim","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Loader","TodoModal","useState","selectedUser","setSelectedUser","useEffect","userId","response","href","email","name","App","isLoading","length","todosActions","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c93b46a7.chunk.js","sourcesContent":["export enum GroupBy {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n    case 'currentTodo/REMOVE':\n      return null;\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { GroupBy } from '../types/GroupBy';\n\ntype SetQueryAction = {\n  type: 'filter/SET_QUERY';\n  payload: string;\n};\n\ntype SetGroupByAction = {\n  type: 'filter/SET_GROUPBY';\n  payload: GroupBy;\n};\n\nconst setQuery = (query: string): SetQueryAction => ({\n  type: 'filter/SET_QUERY',\n  payload: query,\n});\n\nconst setGroupBy = (groupBy: GroupBy): SetGroupByAction => ({\n  type: 'filter/SET_GROUPBY',\n  payload: groupBy,\n});\n\nexport const actions = { setQuery, setGroupBy };\n\ntype State = { query: string, groupBy: GroupBy };\ntype Action = SetQueryAction | SetGroupByAction;\n\nconst initialState = {\n  query: '',\n  groupBy: GroupBy.All,\n};\n\nconst filterReducer = (\n  state: State = initialState,\n  action: Action,\n) => {\n  switch (action.type) {\n    case 'filter/SET_QUERY':\n      return { ...state, query: action.payload };\n    case 'filter/SET_GROUPBY':\n      return { ...state, groupBy: action.payload };\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetTodosAction = {\n  type: 'todos/SET';\n  payload: Todo[];\n};\n\nconst setTodos = (todos: Todo[]): SetTodosAction => ({\n  type: 'todos/SET',\n  payload: todos,\n});\n\nexport const actions = { setTodos };\n\ntype State = Todo[];\ntype Action = SetTodosAction;\n\nconst todosReducer = (\n  state: State = [],\n  action: Action,\n): Todo[] => {\n  switch (action.type) {\n    case 'todos/SET':\n      return action.payload;\n\n    default:\n      return state;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import classNames from 'classnames';\nimport React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions } from '../../features/currentTodo';\nimport { GroupBy } from '../../types/GroupBy';\n\nexport const TodoList: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const selectedTodo = useAppSelector((state) => state.currentTodo);\n  const visibleTodos = useAppSelector(({ filter, todos }) => {\n    return todos.filter((todo) => {\n      const queryCondition = todo.title.toLowerCase()\n        .includes(filter.query.toLocaleLowerCase());\n\n      switch (filter.groupBy) {\n        case GroupBy.Active:\n          return (!todo.completed && queryCondition);\n        case GroupBy.Completed:\n          return (todo.completed && queryCondition);\n\n        default:\n          return (true && queryCondition);\n      }\n    });\n  });\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {visibleTodos.map((todo) => {\n          const { id, title, completed } = todo;\n\n          return (\n            <tr\n              data-cy=\"todo\"\n              className={classNames({\n                'has-background-info-light': selectedTodo === todo,\n              })}\n              key={id}\n            >\n              <td className=\"is-vcentered\">{id}</td>\n              <td className=\"is-vcentered\">\n                {completed && (\n                  <span className=\"icon\" data-cy=\"iconCompleted\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                )}\n              </td>\n              <td className=\"is-vcentered is-expanded\">\n                <p\n                  className={classNames({\n                    'has-text-danger': !completed,\n                    'has-text-success': completed,\n                  })}\n                >\n                  {title}\n                </p>\n              </td>\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => dispatch(actions.setTodo(todo))}\n                >\n                  <span className=\"icon\">\n                    <i\n                      className={classNames(\n                        'far',\n                        { 'fa-eye': selectedTodo !== todo },\n                        { 'fa-eye-slash': selectedTodo === todo },\n                      )}\n                    />\n                  </span>\n                </button>\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","import React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions } from '../../features/filter';\nimport { GroupBy } from '../../types/GroupBy';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const { query, groupBy } = useAppSelector((state) => state.filter);\n\n  const handleChange = (\n    event:\n    | React.ChangeEvent<HTMLSelectElement>\n    | React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    const { value, localName } = event.target;\n\n    if (localName === 'input') {\n      dispatch(actions.setQuery(value));\n    }\n\n    if (localName === 'select') {\n      dispatch(actions.setGroupBy(value as GroupBy));\n    }\n  };\n\n  const resetQuery = () => {\n    dispatch(actions.setQuery(''));\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={handleChange}\n            value={groupBy}\n          >\n            <option value={GroupBy.All}>All</option>\n            <option value={GroupBy.Active}>Active</option>\n            <option value={GroupBy.Completed}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={handleChange}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {!!query.trim() && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            <button\n              aria-label=\"query-delete\"\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={resetQuery}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { getUser } from '../../api';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions } from '../../features/currentTodo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\nexport const TodoModal: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const todo = useAppSelector(state => state.currentTodo);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    if (!todo) {\n      return;\n    }\n\n    getUser(todo.userId).then(response => {\n      setSelectedUser(response);\n    });\n  }, [todo]);\n\n  const resetTodo = () => {\n    dispatch(actions.removeTodo());\n  };\n\n  return (\n    <>\n      <div className=\"modal is-active\" data-cy=\"modal\">\n        <div className=\"modal-background\" />\n        {!selectedUser ? (\n          <Loader />\n        ) : (\n          <div className=\"modal-card\">\n            <header className=\"modal-card-head\">\n              <div\n                className=\"modal-card-title has-text-weight-medium\"\n                data-cy=\"modal-header\"\n              >\n                Todo #\n                {todo?.id}\n              </div>\n\n              <button\n                aria-label=\"modal-close\"\n                type=\"button\"\n                className=\"delete\"\n                data-cy=\"modal-close\"\n                onClick={resetTodo}\n              />\n            </header>\n\n            <div className=\"modal-card-body\">\n              <p className=\"block\" data-cy=\"modal-title\">\n                {todo?.title}\n              </p>\n\n              <p className=\"block\" data-cy=\"modal-user\">\n                {todo?.completed\n                  ? (<strong className=\"has-text-success\">Done</strong>)\n                  : (<strong className=\"has-text-danger\">Planned</strong>)}\n\n                {' by '}\n\n                <a href={`mailto:${selectedUser?.email}`}>\n                  {selectedUser?.name}\n                </a>\n              </p>\n            </div>\n          </div>\n        )}\n      </div>\n    </>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { actions as todosActions } from './features/todos';\n\nexport const App: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const isLoading = useAppSelector(state => state.todos.length);\n  const selectedTodo = useAppSelector(state => state.currentTodo !== null);\n\n  useEffect(() => {\n    getTodos().then(response => {\n      dispatch(todosActions.setTodos(response));\n    });\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {isLoading ? (\n                <TodoList />\n              ) : (\n                <Loader />\n              )}\n\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && <TodoModal />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}